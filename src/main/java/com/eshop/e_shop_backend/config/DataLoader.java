// src/main/java/com/eshop/e_shop_backend/config/DataLoader.java
package com.eshop.e_shop_backend.config; // You might need to create this package

import com.eshop.e_shop_backend.model.Role;
import com.eshop.e_shop_backend.repository.RoleRepository;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional; // Import Transactional

/**
 * DataLoader component to ensure essential roles (ROLE_ADMIN, ROLE_USER)
 * are present in the database on application startup.
 * This runs after the Spring context is fully initialized and JPA is ready.
 */
@Component
public class DataLoader implements CommandLineRunner {

    private final RoleRepository roleRepository;

    // Constructor injection for RoleRepository
    public DataLoader(RoleRepository roleRepository) {
        this.roleRepository = roleRepository;
    }

    /**
     * This method is executed automatically by Spring Boot once the application
     * context is loaded.
     * It checks for and inserts the necessary roles into the database.
     */
    @Override
    @Transactional // Ensure this method runs within a transaction
    public void run(String... args) throws Exception {
        System.out.println("DataLoader: Checking for essential roles...");

        // Ensure ROLE_ADMIN exists
        if (roleRepository.findByName("ROLE_ADMIN").isEmpty()) {
            Role adminRole = new Role();
            // The ID will be automatically generated by the @GeneratedValue(generator =
            // "uuid2")
            // and @GenericGenerator in your Role entity.
            adminRole.setName("ROLE_ADMIN");
            roleRepository.save(adminRole);
            System.out.println("DataLoader: ROLE_ADMIN created.");
        } else {
            System.out.println("DataLoader: ROLE_ADMIN already exists.");
        }

        // Ensure ROLE_USER exists
        if (roleRepository.findByName("ROLE_USER").isEmpty()) {
            Role userRole = new Role();
            // The ID will be automatically generated as a UUID.
            userRole.setName("ROLE_USER");
            roleRepository.save(userRole);
            System.out.println("DataLoader: ROLE_USER created.");
        } else {
            System.out.println("DataLoader: ROLE_USER already exists.");
        }

        // Optional: Add a verification step to see if they are truly there
        System.out.println("DataLoader: Verifying roles after insertion:");
        roleRepository.findByName("ROLE_ADMIN")
                .ifPresent(r -> System.out.println(" - Found ROLE_ADMIN with ID: " + r.getId()));
        roleRepository.findByName("ROLE_USER")
                .ifPresent(r -> System.out.println(" - Found ROLE_USER with ID: " + r.getId()));
    }
}
